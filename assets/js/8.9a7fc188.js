(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{361:function(e,t,a){"use strict";a.r(t);var o=a(25),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("Your JS repo has gotten large enough that you have turned to using a tool to help you manage multiple packages inside a repository. That's great! However, you realized quickly that the tasks defined inside the workspace have to be run in package dependency order.")]),e._v(" "),a("p",[e._v("Lerna, Rush, wsrun and even pnpm will provide a simple way for you to run npm scripts to be run in a topological order. However, these tools will force you to run your tasks by script name one at a time. For example, all the "),a("code",[e._v("build")]),e._v(" scripts will have to run first. Then all the "),a("code",[e._v("test")]),e._v(" scripts run in the topological order.")]),e._v(" "),a("p",[e._v("This usually means that there are wasted CPU cycles in between "),a("code",[e._v("build")]),e._v(" and "),a("code",[e._v("test")]),e._v(". We can achieve better pipelining the npm scripts if we had a way to say that "),a("code",[e._v("test")]),e._v(" can run as soon as "),a("code",[e._v("build")]),e._v(" are done for the package.")]),e._v(" "),a("p",[a("code",[e._v("lage")]),e._v(' (Norwegian for "make", pronounced law-geh) solves this by providing a terse pipelining syntax. It has features specifically address large monorepos with high number of packages:')]),e._v(" "),a("ul",[a("li",[e._v("package and task scopes")]),e._v(" "),a("li",[e._v("output caching")]),e._v(" "),a("li",[e._v("sound scheduling with package task pipeline")]),e._v(" "),a("li",[e._v("prioritization")])])])}),[],!1,null,null,null);t.default=s.exports}}]);